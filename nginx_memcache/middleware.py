from django.conf import settings

from .cache import cache_response


is_enabled = getattr(settings, 'CACHE_NGINX', True)


class UpdateCacheMiddleware(object):
    """Updates the cache cache with the response of the request.

    It is of _paramount_ importance that the generated cache_key matches
    exactly the key generated by your web server (nginx) to lookup the page
    from the cache.

    Remember to set CACHE_NGINX_ALIAS to a cache backend that uses memcache.

    The middleware must be at the top of settings.MIDDLEWARE_CLASSES
    to be called last during the response phase.
    """

    def __init__(self, cache_timeout, anonymous_only):
        """Initialize middleware. Args:
            * cache_timeout - seconds after which the cached response expires
            * page_version_fn - return a value to version the view based on
                    the request.
            * anonymous_only - only cache if the user is anonymous
        """
        self.cache_timeout = cache_timeout
        #self.page_version_fn = page_version_fn
        self.anonymous_only = anonymous_only

    def process_response(self, request, response):
        """Sets the cache, if needed."""
        if not is_enabled or request.method != 'GET' or (
            response.status_code != 200):
            # HTTPMiddleware, throws the body of a HEAD-request away before
            # this middleware gets a chance to cache it.
            return response
        # Logged in users don't cause caching if anonymous_only is set.
        if self.anonymous_only and request.user.is_authenticated():
            return response

        cache_response(request, response, cache_timeout=self.cache_timeout)
        return response
